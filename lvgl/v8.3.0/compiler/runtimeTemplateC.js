/* template: generate the related code and return as string */
import { color_convert } from './runtimeWrapper.js';

export const template_c_create = (id, parent_id, type) => {
    return `    lv_obj_t * ${id} = lv_${type}_create(${parent_id});`;
}

export const template_c_setter_simple = (id, type, attr, param) => {
    return `    lv_${type}_set_${attr}(${id}, ${param});`;
}

export const template_c_api_simple = (id, type, api, param, par_id) => {
    if (id.startsWith('img') && (api === "set_src")) {
        return template_c_img_api(id, type, api, param, par_id);
    }
    return `    lv_${type}_${api}(${id}, ${param});`;
}

export const template_c_style_simple = (id, styleApi, param, bindStyleName) => {
    if (styleApi.includes('_color')) {
        let hexColor = color_convert(param);
        return `    lv_style_set_${styleApi}(&${bindStyleName},lv_color_hex(${hexColor}));`
    }
    if (styleApi.includes('_img_src')) {
        return template_c_img_api(id, 'style', `set_${styleApi}`, param);
    }
    return `    lv_style_set_${styleApi}(&${bindStyleName},${param});`;
}

export const template_c_img_api = (id, type, api, param, par_id) => {
    let paramskey = param.replace(/[ \.]/g, '_');
    let code = [
        `    //LV_IMG_DECLARE(${paramskey});`,
        `    //lv_${type}_${api}(${id}, &${paramskey});`,
        `    lv_${type}_${api}(${id}, "A:/${paramskey}");`,
        "",
    ];
    return code.join('\n');
}

export const template_c_cb = (id) => {
    return `static void ${id}_event_cb(lv_event_t *e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t *obj = lv_event_get_target(e);

    // Write the event handler here
    if (code == LV_EVENT_FOCUSED)
    {

    }
    else if (code == LV_EVENT_CLICKED)
    {

    }
}`;
}


export const template_c_all = (body, cb, actFileName) => {
    return `
/**
 * LVGL Version: v8.3.0
 * Auto generated by the LVGL LVGL-Extension
 */

#ifndef ${actFileName.toUpperCase()}_H
#define ${actFileName.toUpperCase()}_H

#ifdef __cplusplus
extern "C" {
#endif

/**********************
 *   CALLBACK
 **********************/
${cb}
/**********************
 *   GLOBAL FUNCTIONS
 **********************/
${body}

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /*${actFileName.toUpperCase()}_H*/
`
}


export const template_c_styles = (node)=>{
    let id = node.id;
    
    var partGroup = {};
    for (let api of node.styles) {
        let api2 = api.split('.');
        let part = 'MAIN';
        let key = api;
        if (api2.length == 2) {
            part = api2[0];
            key = api2[1];
        }
        if (!partGroup[part]) {
            partGroup[part] = [];
        }
        partGroup[part].push(key);
    }

    let code = [];
    for (let part in partGroup) {
        let styleid = `${id}_style_${part}`;
        code.push(``);
        code.push(`    lv_style_t ${styleid};`)
        code.push(`    lv_style_init(&${styleid});`)

        let styles = partGroup[part];
        for (let api of styles) {
            let param = node.data[part+ '.' + api];
            if (param) {
                code.push(template_c_style_simple(id, api, param, styleid));
            }
        }
        
        let partStr = 'LV_PART_' + part;
        code.push(`    lv_obj_add_style(${id}, &${styleid}, ${partStr});`);
    }

    if (node.cb) {
        code.push(`    lv_obj_add_event_cb(${id}, ${id}_event_cb, LV_EVENT_ALL, NULL);`)
    }
    return code.join('\n');
}
