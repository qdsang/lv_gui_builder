import { Buffer } from 'buffer'

/**
 * Generate LVGL font in Python format
 * @param {Object} args - Font generation arguments
 * @param {Object} font_data - Font data including glyphs, metrics etc
 * @returns {Object} - Generated font file content
 */
function pythonWriter(args, font_data) {
  const indent = ' '.repeat(4)
  let content = []
  
  /*-----------------
   *  FILE HEADER
   *----------------*/
  content.push('"""')
  content.push('Font generated by LVGL Font Converter')
  content.push(`Size: ${args.size} px`)
  content.push(`Bpp: ${args.bpp}`)
  content.push(`Opts: ${args.opts_string}`)
  content.push('"""')
  content.push('')
  
  /*-----------------
   *  IMPORTS
   *----------------*/
  content.push('import lvgl as lv')
  content.push('import ustruct as struct')
  content.push('')

  /*-----------------
   *  FONT DATA
   *----------------*/
  content.push('_font =\\')
  content.push('b\'')

  font_data.glyphs.forEach(glyph => {
    if (glyph.pixels && glyph.pixels.length > 0) {
      // 写入字形头部信息
      const width = glyph.bbox.width
      const height = glyph.bbox.height
      const advance = Math.round(glyph.advanceWidth)
      content.push(`\\x${width.toString(16).padStart(2,'0')}`) // width 
      content.push(`\\x${height.toString(16).padStart(2,'0')}`) // height
      content.push(`\\x${advance.toString(16).padStart(2,'0')}`) // advance

      // 转换像素数据为位图
      let bits = []
      glyph.pixels.forEach(row => {
        for(let i = 0; i < row.length; i += 8) {
          let byte = 0
          for(let j = 0; j < 8 && i + j < row.length; j++) {
            if(row[i + j] > 0) {
              byte |= (1 << (7 - j))
            }
          }
          content.push(`\\x${byte.toString(16).padStart(2,'0')}`)
        }
      })
    }
  })
  content.push('\'')
  content.push('')

  /*-----------------
   *  CALLBACKS
   *----------------*/
  content.push('def get_ch(ch):')
  content.push(`${indent}"""Get character glyph data""")`)
  content.push(`${indent}if unicode_letter in FONT_DATA:`)
  content.push(`${indent}${indent}return FONT_DATA[unicode_letter]`)
  content.push(`${indent}return (`)
  content.push(`${indent}${indent}[0x00] * ${Math.ceil(args.size/8)},  # Empty character`)
  content.push(`${indent}${indent}${args.size},`)
  content.push(`${indent}${indent}${args.size}`)
  content.push(`${indent})`)
  content.push('')

  /*-----------------
   *  CREATE FONT
   *----------------*/
  content.push('# Create font')
  content.push(`font = lv.font_t()`)
  content.push('')
  
  content.push('# Set font properties')
  content.push(`font.line_height = ${font_data.ascent - font_data.descent}`)
  content.push(`font.base_line = ${-font_data.descent}`)
  content.push(`font.get_glyph_dsc = get_ch`)

  return {
    [args.output]: content.join('\n')
  }
}

export default pythonWriter 